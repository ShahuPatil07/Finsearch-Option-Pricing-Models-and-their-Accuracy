import numpy as np
import matplotlib.pyplot as plt

def MCS(principal, annual_return, annual_std_dev, years, num_simulations):
   
    np.random.seed(20)

    # Generate random daily returns based on the annual return and standard deviation
    # We assume daily returns follow a normal distribution (mean: annual_return / 252, std: annual_std_dev / sqrt(252))
    daily_return = 1 + np.random.normal(annual_return / 252, annual_std_dev / np.sqrt(252), (years * 252, num_simulations))
    
    # Calculate the cumulative returns over time for each simulation
    cumulative_return = np.cumprod(daily_return, axis=0)
    
    # Calculate the portfolio value for each simulation over time
    portfolio_value = principal * cumulative_return

    return portfolio_value

# Input parameters
initial_investment = 10000
expected_annual_return = 0.07
annual_standard_deviation = 0.15
investment_period_years = 10

# Run the Monte Carlo simulation
simulated_portfolio_values = MCS(initial_investment, expected_annual_return, annual_standard_deviation, investment_period_years, 10000)
                                                                         #(NUMBER OF SIMULATIONS=10000)
# Calculate the final portfolio value for each simulation
final_portfolio_values = simulated_portfolio_values[-1, :]

# Plot the results
plt.figure(figsize=(10, 6))
plt.hist(final_portfolio_values, bins=30, edgecolor='black', alpha=0.8)
plt.xlabel('Final Portfolio Value generated by MCS')
plt.ylabel('No. of Simulationss')
plt.title('Monte Carlo Simulation - Final Portfolio Values')
plt.grid(True)
plt.show()
